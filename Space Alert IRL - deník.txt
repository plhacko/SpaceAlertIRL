Ročníkový projekt Space Alert IRL
konzultace: pondělí 10:40 (každých 14dní, počínaje 29.03)
cíle: dovést to do Bakalářské práce
background check-literary review
  -> jak se používají techologie
  -> najít zda již podobný projekt neexistuje nebo najít jemu podobné (zjistit, jak funguje)
způsob: Unity má NFC plugin (https://assetstore.unity.com/packages/tools/integration/digits-nfc-toolkit-131674)


nápady:
  -> v deskové verzi SpaceAlerm má počítač úsporný režim, kde se zobrazuje logo sponzora -> místo toho hrát reklamy od CGE (nebo reálné reklamy a vydělávat reálné $$$)



29.03.21
prozkoumávání technologie NFC
https://www.youtube.com/watch?v=tJue55MIqi4&ab_channel=XamarinDevelopers
https://www.youtube.com/watch?v=STfzU18v7gE&ab_channel=SaamerMansoor
první projekt
https://docs.microsoft.com/en-us/samples/xamarin/monodroid-samples/cardreader/
-> stáhnul jsem Xamarine pro VisualStudio

29.03.21 - první kozultace
01_target:
  -> udělat Java aplikaci pro telefon jako proof of concept
  -> udělat NFC reader a spstit ho na telefon (https://www.youtube.com/watch?v=n-8Aq3tp5IE&ab_channel=MasteringProgramming)
  -> (optional) najít podobné hry a jak se dělají
  
11.04.21 - plnění 01_target
  -> NFC tagy zatím nedorazily, zkusím jim zavolat v pondělí po konzultaci
  -> dělání jednoduché app na Sndroid
      -> instalace android Studia (podařilo se na 4. pokus - SDK z nějakého důvodu padalo)
      -> Proč je v základu Kotlin? -> rozhodl jsem se pokračovat v Javě
      -> tutoriál, který jsem použil: https://www.youtube.com/watch?v=EOfCEhWq8sg&ab_channel=Treehouse
        -> ukázalo se, že se mnohé věci přemístili od roku 2018, ale nakonec to dopadlo celkem v pořádku
        -> podařilo se mi odemknout vývojářské funkce pro můj telefon (7x tapnout na build verzi telefonu - je to magie) a poté na něm spustit jednoduchou aplikaci    
        -> už pomalu začínám rozumět, views
  -> NFC tutorial: https://www.youtube.com/watch?v=n-8Aq3tp5IE&ab_channel=MasteringProgramming
    -> nehotové 
  -> také jsem konečně vytvořil gitHub repozitář   

12.04 - druhá konzultace
02_target:
  -> rozhodnout se zda používat Unity nebo Godot (odkazy v discord chatu)
    -> Godot je opensource engine a měl by mít dobře vyřešené síťování
    -> Unity má síťování zatím nově a tak by stálo za to to vyzkoušet
    -> obecně mít prototipy v obou sw -> do bc by se hodilo je mít na ukázání, proč jsme se rozhodli pro tento engine (sekce volba enginu)
  -> dodělat NFC prototyp v android studiu
  -> dále prozkoumávat možnosti multiplayeru 

16-18.04. - GameJam YOLO
  -> během krátké doby (48h) jsem si relativně vzato potykal s Unity (trocha skriptování a zvuků, ale hlavně animace)

25.04 - plnění 02_target (2h25min + 2h05min)
  -> společnost u které jsem koupil NFC tagy neodpovídá, tak jsem našel společnost jinou, dostal jsem hned další den
  -> aplikace NFC Tools na nich funguje
  ->možnosti multiplayeru 
    ¤ Unity      https://docs-multiplayer.unity3d.com/
     -> nepodporuje p2p, ale snad by bylo i lepší mít klient Server
     -> MLAPI - Unity  https://github.com/Unity-Technologies/com.unity.multiplayer.mlapi
       -> high level networking
     -> Unity.NetworkingTransport  https://docs.unity3d.com/Packages/com.unity.transport@0.6/manual/index.html
       -> nový balíček Unity pro přidání multiplayeru (Unity 2020.1.2 a pozdější)
       -> 
    ¤ Godot https://docs.godotengine.org/en/stable/tutorials/networking/high_level_multiplayer.html#high-level-vs-low-level-api
      

  -> Co vlastně budu požadovat od Multiplayeru?  (úvaha v čase kompilace)
    -> komunikace server-klient __ANO__
    -> synchronizované animace => není vyloženě nutné (v Unity bychom mohli mít v datech, které updatujeme mít i data, podle kterých se řídí animace)
    -> synchronizované pozice hráčů __??__ (asi ano, ale to by stačilo monitorovat pokaždé, když hráč "projde dveřmi" nebo přistoupí k nějakému zařízení)
    -> Chceme p2p nebo host server?
      -> v Unity už ani dedikované p2p není
      -> mohl by být problém, pokud by nějaký server stratil signál, což se při chaosu přebíhání po bytě klidně mohlo stát     
        -> to samé s klientem, ale to by snad neměl být takový problém
  MLAPI - výukový Unity projekt BoosRoom    tutorial: https://www.youtube.com/watch?v=CmwZPYV-a1o&ab_channel=DapperDino
  -> narazil jsem na problém s importem, zdá se, že jsem nikdy nenainstaloval základní Git       

26.04 -> plnění 02_target (1h40min)
  -> plnění tutoriálů pro MLAPI   https://docs-multiplayer.unity3d.com/docs/tutorials/helloworldintro/index.html
    -> (inicializace projektu v Unity je vždy děsná bolest, potom ale už funguje hezky) 
    -> zdá se, že MLAPI hezky funguje na lokální síti, ale i na internetu obecně (mělo by stačit znát správnou IP adresu)
    -> MLAPI se také stará o šifrování a autentikaci (jen je potřeba to někde zapnout)
27.04 -> třetí konzultace
  -> rozhodnutí o použití Unity a nového nástroje na mutliplayer MLAPI
  -> dále také jsme se rozhodli použít srver-klient architekturu
    -> samotný uživatel by nakonec ani neměl mít přístup k implementaci (která bude na serveru)
03_target:
  -> pokračovat v tutoriálech na MLAPI
  -> naprogramovat prototyp
    -> nasymulovat race condition a zjistit, zda ji náhodou MLAPI neřeší vnitřně
  -> optional: přenést prototyp na telefon

18.05.21
plnění 03_target:
  -> doposlechnutí si tutoriálů na MLAPI
    -> HelloWorld-testProject oživení 45min        
    -> BuildingGoldenPath-testProject 35min  https://docs-multiplayer.unity3d.com/docs/tutorials/goldenpath/index.html   
      -> tutorial, jak spuštět MLAPI jako server, client nebo host(anglický význam, né český) z příkazové řádky (mohlo by být užitečné, až hra poběží někde na serveru)
        -> (stačí přidat do NetworkManageru GameObjekt se skriptem NetworkCommandLine)
20.05.21
nápady pro implementaci hratelnosti (gameplay):
  -> hlavní laser dané části se bude nabíjet z energetického jezírka, kde musí být dostatek energie
    -> zajímavé bude, že energie se nebude brát automaticky, ale bude jí muset někdo převést
      -> tj. buď ji hráč převede a poběží k Laseru nebo budou dva a jeden bude střílet a druhý převádět energii
        -> odměnnou za spolupráci by mohlo být to, že s čerstvě nabitou energií by mohl hráč udělit větší poškození
      
plnění 03_target:
  -> při pročítání Networking části dokumentace, jsem se rozhodl, že by mohlo být zajímavé to zkusit uplatnit na již existující projekt 1h
    -> rozhodl jsem se pro roll a ball z turtoriálů (viz předmět indtroduction to GameDev)
  -> RollABall
    -> podařilo se mi vytvořit build, který "funguje" (asi stejně dobře jako Helloworld projekt) 15min
  -> pokračování ve čtení 

  -> server list tutorial: https://www.youtube.com/watch?v=77L3MMKDWmo&ab_channel=FirstGearGames

čtvrtá konzultace
Target_04
  -> NFC čtečka
  -> callback messages
  -> multiplayer na lokální síti

05.06 -> plnění 04_target
 -> našel jsem NFC Reader gitHubu a rozchodil jej na svém telefonu
  -> zatím nevím, jak přečíst text
  -> hraním si s androidJavaObject jsem strávil asi 4h bez většího postupu
    -> problém je, že základní tag nepodporuje přečtení svých dat a musí se předat třídě speciálního typu (mé současné chipy implementují NPCA a ultraLight)
    -> navíc stále se mi nepodařilo, aby aplikace byl výchozí bod po načtení chipu, co jsem tak zjistil je, že bych musel si pořídit jiné tagy
  -> nakonec jsem se rozhodl vzdát a napsat si čtečku v Javě a propojit jí s unity později

__dlouhá doba__

shrnutí stavu o jehož vytváření není záznam:
  -> NFC reade funguje a to dobře (pomocí AndroidJavaObject) (zatím púouze pro Android)
  -> MLAPI funguje relativně dobře pro LAN, nic víc jsem nezkoušel
  -> je vytvořený demo soubor  

09.11.
cíle minulé konzultace:
  -> vytvořit si dokument o všech stavech, které mohou při chození po lodi nastat
  -> naprogramovat nějakou základní verzi pohybu po lodi
  -> zápis a učení se s figma
      
18.11.
  -> přepsal jsem plán do figma
  -> a vytvářím prototyp nějaké základní lodi
  -> práce na scéně zobrazující obecnou místnost
  -> práce na základních třídách (Room, Door, Amenity, Player, ..)
  -> jednoduché zobrazování hráčů a v jaké místnosti jsou (čistě vypsané textově)
  -> rozhodnutí:
    -> libovolná akce hráče se vždy dělá přes server
    -> zobrazování stavu se bude dělat pomocí NetworkObject a NetworkVariable
      -> scéna bude mít za úkol zobrazovat data místa, kde se zrovna nachází hráč (RoomScene, DoorScene, LaserScene) 
      -> NetworkObject jesou sdílené objekty (Room, Door, Amenities, ..)
      -> NetworkVariable bude vždy upravovat pouze server
      -> NetworkVariable bude sloužit k tomu, aby se četli z ní data zobrazované hráči
          -> pravděpodobně se omezíme a základní datové typy
      -> předpřipravené lodě prozatím budou uloženy na nějaké scéně scéně (Ship_A)
          -> to nám zaručí, že všichni budou mít stejnou loď
          -> z této scény přejdou na obyčejnou scému Room a začně hra (části lodě jsou don't destroy on load)
                         
     























